##############################################################################
### To use this docker-compose file you have to
### initialise the following environment variables in file .env:
### (value are examples):
###
### RELEASE_DIR=guard-platform
### ZOO_K_PORT=2181
### KAFKA_PORT_1=29092
### KAFKA_PORT_INT_1=9092
### VOLUME_DIR=/opt/guard
### GUARD_SERVER=example.server.com
### GUARD_SERVER_ADDRESS=internal address XXX.XXX.XXX.XXX
### LS_PORT=5044
### ELASTIC_PORT_1=9200
### CB_MAN_PORT=5000
### DASHBOARD_PORT=84
### OPENVAS_PORT_1=9443
### BC_CONN_PORT=18080
### IDP_PORT=10443
### GUARD_REPOSITORY=guard2020

version: '3.6'
services:
  
  portainer:
    image: ${GUARD_REPOSITORY}/portainer-ce:latest
    ports:
      - "18000:8000"
      - "19000:9000"
    volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    - /var/lib/docker/volumes:/var/lib/docker/volumes
    restart: always
  
  idp:
    image: ${GUARD_REPOSITORY}/idm:latest
    container_name: aa_module-idp
    ports:
      - ${IDP_PORT}:10443
    tty: true
    restart: unless-stopped
     
  zookeeper:
    image: ${GUARD_REPOSITORY}/zookeeper:latest
    hostname: zookeeper
    ports:
      - "${ZOO_K_PORT}:${ZOO_K_PORT}"
    volumes:
      - ${VOLUME_DIR}/data/zookeeper/data:/data
      - ${VOLUME_DIR}/data/zookeeper/datalog:/datalog
    restart: unless-stopped 

  kafka1:
    image: ${GUARD_REPOSITORY}/kafka_confluent:latest
    hostname: kafka1
    ports:
      - "${KAFKA_PORT_1}:${KAFKA_PORT_1}"
      - "${KAFKA_PORT_INT_1}:${KAFKA_PORT_INT_1}"
    environment:
      KAFKA_SSL_CLIENT_AUTH: none
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://:${KAFKA_PORT_INT_1},PLAIN://${GUARD_SERVER}:${KAFKA_PORT_1}
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,PLAIN:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:${ZOO_K_PORT}"
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1    
      KAFKA_TOPIC_CREATION_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE : "true" 
      KAFKA_LOG4J_LOGGERS: "org.telematics=ERROR"
      ZOOKEEPER_SASL_ENABLED: "false"
    command: /etc/confluent/docker/dockerize -wait https://idp:10443 -skip-tls-verify -timeout 600s /etc/confluent/docker/run     
    volumes:
      - ${VOLUME_DIR}/data/kafka1/data:/var/lib/kafka/data
    depends_on:
      - zookeeper
      - idp
    restart: unless-stopped

  akhq:
    image: ${GUARD_REPOSITORY}/akhq:latest
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "kafka1:9092"
              schema-registry:
                url: "http://schema-registry:8085"
              connect:
                - name: "connect"
                  url: "http://connect:8083"
    ports:
      - 19100:8080
    links:
      - kafka1
      - schema-registry
      
  logstash_guard:
    image: ${GUARD_REPOSITORY}/logstash:latest
    container_name: logstash_guard
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
      SERVER_ADDRESS: "kafka1"
      ELASTIC_SERVER: "es01"
      KAFKA_PORT: ${KAFKA_PORT_INT_1}
      ELASTIC_PORT: ${ELASTIC_PORT_1}
    volumes:
    - ${VOLUME_DIR}/logstash-guard/config:/usr/share/logstash/config/
    - ${VOLUME_DIR}/logstash-guard/pipeline:/usr/share/logstash/pipeline
    - ${VOLUME_DIR}/logstash-cb/file-output:/var/logstash-file-output
    expose:
    - "9001"
    - "${LS_PORT}"
    - "9600"
    ports:
    - "9001:9001"
    - "${LS_PORT}:${LS_PORT}"
    - "9600:9600"
    depends_on:
      - kafka1
    restart: unless-stopped
   
  es01:
    image: guard2020/elasticsearch:latest
    container_name: es01
    environment:
      - node.name=es01
      - cluster.name=es-docker-cluster
      - cluster.initial_master_nodes=es01
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - ${VOLUME_DIR}/elastic/data01:/usr/share/elasticsearch/data
    ports:
      - "${ELASTIC_PORT_1}:${ELASTIC_PORT_1}"
    networks:
      - elastic
      - default
    restart: unless-stopped
  
  kib01:
    image: ${GUARD_REPOSITORY}/kibana:cti
    container_name: kib01
    ports:
      - 5601:5601
    environment:
      ELASTICSEARCH_URL: http://es01:9200
      ELASTICSEARCH_HOSTS: '["http://es01:9200"]'
    networks:
      - elastic
      
  cb-manager:    
    image: ${GUARD_REPOSITORY}/cb-manager:latest
    hostname: cb-manager
    container_name: cb-manager.master
    environment:
#      - CB_MAN_ELASTICSEARCH_ENDPOINT=${GUARD_SERVER_ADDRESS}:${ELASTIC_PORT_1}
      - CB_MAN_OAUTH2_ENABLED=false
      - CB_MAN_AUTH=true 
      - CB_MAN_HOST=0.0.0.0
      - CB_MAN_PORT=5000
      - CB_MAN_HTTPS=false
      - CB_MAN_AUTH_ENABLED=false
      - CB_MAN_AUTH_HEADER_PREFIX=GUARD
      - CB_MAN_AUTH_SECRET_KEY=guard-secret-key
      - CB_MAN_HEARTBEAT_TIMEOUT=10s
      - CB_MAN_HEARTBEAT_PERIOD=1min
      - CB_MAN_ELASTICSEARCH_ENDPOINT=es01:9200
      - CB_MAN_ELASTICSEARCH_TIMEOUT=20s
      - CB_MAN_ELASTICSEARCH_RETRY_PERIOD=1min
      - CB_MAN_ELASTIC_APM_ENABLED=false
      - CB_MAN_ELASTIC_APM_SERVER=http://es01:8200
      - CB_MAN_LOG_CONFIG=log.yaml    
    ports:
      - ${CB_MAN_PORT}:${CB_MAN_PORT}
    restart: unless-stopped
    
  security-dashboard:
    image: ${GUARD_REPOSITORY}/guard-dashboard:latest
    container_name: guard-dashboard
    user: 'www-data'
    ports:
      - 8400:8080
    environment:
      - APP_NAME="GUARD Security Dashboard"
      - APP_ENV=local
      - APP_KEY=base64:EJRQ64KELsuW29GsBrqX5SI+7lktUytqkDdjevwKFWY=
      - APP_DEBUG=true
      - APP_URL=http://localhost
      - CB_API=http://${GUARD_SERVER_ADDRESS}:5000
      - SC_API=http://${GUARD_SERVER_ADDRESS}:9000/gfg
      - ELASTICSEARCH_URL=http://${GUARD_SERVER_ADDRESS}:9200
      - KIBANA_URL=http://${GUARD_SERVER}:5601
      - DB_CONNECTION=mysql
      - DB_HOST=db
      - DB_PORT=3306
      - DB_DATABASE=security_dashboard
      - DB_USERNAME=sduser
      - DB_PASSWORD=rootguard2021
      - LOG_CHANNEL=stack
      - BROADCAST_DRIVER=log
      - CACHE_DRIVER=file
      - QUEUE_CONNECTION=sync
      - SESSION_DRIVER=file
      - SESSION_LIFETIME=120
      - MIX_DATA_TRACKING_API_URL=http://${GUARD_SERVER_ADDRESS}:4001
    links:
      - mysql-db
    depends_on:
      - mysql-db  
    restart: unless-stopped
          
  mysql-db:
    image: ${GUARD_REPOSITORY}/mysql:latest
    container_name: mysql-db
    environment:
      - MYSQL_ROOT_PASSWORD=securerootpassword
      - MYSQL_DATABASE=security_dashboard
      - MYSQL_USER=sduser
      - MYSQL_PASSWORD=rootguard2021
#    volumes:
     #- ../guard-platform/core_framework/security_dashboard/guard_docker/run/var:/var/lib/mysql 
#     - ${VOLUME_DIR}/security_dashboard/guard_docker/run/var:/var/lib/mysql
    ports:
      - "3307:3306"
    networks:
      default:
        aliases:
          - db
    restart: unless-stopped



# Following container are created dinamically on demand
#  algo1.1.2:    
#    container_name: algo1.1.2
#    image: ${GUARD_REPOSITORY}/algo1.1.2:latest
#    environment:  
#      SERVER_ADDRESS: ${GUARD_SERVER_ADDRESS}
#      KAFKA_PORT: ${KAFKA_PORT_INT_1}
#    ports:
#      - "9999:9999"
#    depends_on:
#      - kafka1
#      - kafka2
#      - kafka3
#    restart: unless-stopped
            
#  algo5:
#    container_name: algo5
#    image: ${GUARD_REPOSITORY}/algo5:latest    
#    volumes:
#      - algo5-scan_reports:/opt/algo5/Vulnerability/reports
#    tty: true
#    stdin_open: false
#    networks:
#      - algo5_net

#  To Do: cp ~/${RELEASE_DIR}/local_sidercars/log_data_agents/logdata-anomaly-miner/source/root/etc/aminer/template_config.yml ~/guard-platform-v3.0/local_sidercars/log_data_agents/logdata-anomaly-miner/source/root/etc/aminer/config.yml
#         cp ~/${RELEASE_DIR}/local_sidercars/log_data_agents/logdata-anomaly-miner/source/root/etc/aminer/conf-available/generic/ApacheAccessModel.py ~/guard-platform-v3.0/local_sidercars/log_data_agents/logdata-anomaly-miner/source/root/etc/aminer/conf-enabled/

  logdata-anomaly-miner:    
    container_name: logdata-anomaly-miner
    image: ${GUARD_REPOSITORY}/logdata-anomaly-miner:latest
    volumes:
      - ${VOLUME_DIR}/logdata-anomaly-miner/source/root/etc/aminer/:/etc/aminer
    restart: unless-stopped

  alert-aggregation-generator:    
    container_name: alert-aggregation-generator
    image: ${GUARD_REPOSITORY}/alert-aggregation-generator:latest
    network_mode: bridge
    volumes:
      - ${VOLUME_DIR}/alert/config.yaml/:/app/config.yaml 
    restart: unless-stopped  


  security-controller:    
    container_name: security-controller
    image: ${GUARD_REPOSITORY}/security-controller:min
    ports:
      - "9000:9000"
    environment:
      - kafkaEndpoint=${GUARD_SERVER_ADDRESS}:9092
      - contextBrokerManagerEndpoint=${GUARD_SERVER_ADDRESS}:5000
      - cnitMlAlgorithmEndpoint=${GUARD_SERVER_ADDRESS}:9999
      - spring_kafka_consumer_bootstrap-servers=${GUARD_SERVER_ADDRESS}:9092
      - spring_kafka_producer_bootstrap-servers=${GUARD_SERVER_ADDRESS}:9092
      - BOOTSTRAP_SERVERS_CONFIG=${GUARD_SERVER_ADDRESS}:9092
      - GUARD_SERVER_ADDRESS=${GUARD_SERVER_ADDRESS}:9092
    cpus: 1
    mem_limit: 1Gi
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes
    depends_on:
      - cb-manager
      - kafka1
    restart: unless-stopped    

  guard-agent:
    image: ${GUARD_REPOSITORY}/guard-agent:latest
    ports:
      - "4100:4100"
    container_name: guard-agent
    environment:
      - KAFKA_ALGO_TOPIC=network-data
      - KAFKA_BOOTSTRAP_SERVERS=${GUARD_SERVER_ADDRESS}:9092
      - GUARD_SERVER_IP=${GUARD_SERVER_ADDRESS}
      - CB_PORT=${CB_MAN_PORT} 
      - LCP_HOST=0.0.0.0
      - LCP_PORT=${LCP_PORT}
      - LCP_HTTPS=0
      - LCP_AUTH_ENABLED=0
      - LCP_AUTH_HEADER_PREFIX=
      - LCP_AUTH_SECRET_KEY=
      - LCP_ELASTIC_APM_ENABLED=0
      - LCP_ELASTIC_APM_SERVER=
      - LCP_POLYCUBE_HOST=0.0.0.0
      - LCP_POLYCUBE_PORT=9000
      - LCP_POLYCUBE_TIMEOUT=20s
      - LCP_LOG_CONFIG=log.yaml
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/volumes:/var/lib/docker/volumes

volumes: 

  algo5-scan_reports:
    driver: local
    driver_opts:
       o: bind
       type: none
       device: ${VOLUME_DIR}/scan_reports

networks:
  backend:
    name: backend-network  
  elastic:
    driver: bridge
  algo5_net:
