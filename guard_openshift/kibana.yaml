kind: Service
apiVersion: v1
metadata:
  name: kibana
  namespace: guardce
  labels:
    app: kibana
    app.kubernetes.io/component: kibana
    app.kubernetes.io/instance: kibana
    app.kubernetes.io/part-of: guard
spec:
  ports:
    - name: 8080-tcp
      protocol: TCP
      port: 8080
      targetPort: 5601
    - name: 5601-tcp
      protocol: TCP
      port: 5601
      targetPort: 5601
  internalTrafficPolicy: Cluster
  type: ClusterIP
  ipFamilyPolicy: SingleStack
  sessionAffinity: None
  selector:
    app.kubernetes.io/part-of: guard
    deployment: kibana
---
kind: Route
apiVersion: route.openshift.io/v1
metadata:
  name: kibana
  namespace: guardce
  labels:
    app: kibana
    app.kubernetes.io/component: kibana
    app.kubernetes.io/instance: kibana
    app.kubernetes.io/part-of: guard
spec:
  host: kibana-guardce.apps.ocp4.italtel.com
  to:
    kind: Service
    name: kibana
    weight: 100
  port:
    targetPort: 8080-tcp
  wildcardPolicy: None
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: kibana
  namespace: guardce
data:
  ELASTICSEARCH_HOSTS: '["http://es-cluster.guardce.svc:9200"]'
  ELASTICSEARCH_URL: 'http://es-cluster.guardce.svc:9200'
---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: kibana
  namespace: guardce
  labels:
    app: kibana
    app.kubernetes.io/component: kibana
    app.kubernetes.io/instance: kibana
    app.kubernetes.io/part-of: guard
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/part-of: guard
      deployment: kibana
  template:
    metadata:
      creationTimestamp: null
      labels:
        app.kubernetes.io/part-of: guard
        deployment: kibana
    spec:
      containers:
        - name: kibana
          image: guard2020/kibana:cti
          ports:
            - containerPort: 5601
              protocol: TCP
          envFrom:
            - configMapRef:
                name: kibana
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          imagePullPolicy: Always
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      securityContext: {}
      schedulerName: default-scheduler
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  revisionHistoryLimit: 10
  progressDeadlineSeconds: 600
---

