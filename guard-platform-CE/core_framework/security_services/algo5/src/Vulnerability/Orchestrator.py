#!/usr/bin/python3

from .Scanners.Generic.OpenVAS import OpenVAS
from .Scanners.Web.w3af import w3af
from Utils.Misc import uuid, dump, jdump, stringify_exception
from Utils.Logger import Logger

from collections import OrderedDict
from time import sleep

import os

OPENVAS = "OpenVAS"
W3AF = "w3af"

class Orchestrator:
	""" Responsible to configure the underlying scnaners, initiate scans, collect and unify reports
	"""
	_caller_prefix = "Orchestrator"
	_supported_scanners = OrderedDict({
			OPENVAS : OpenVAS,
			W3AF : w3af
		})

	_poll_interval = 5 # seconds

	_abs_path = os.path.dirname(os.path.abspath(__file__))
	_reports_dir = os.path.join(_abs_path, "reports")

	def __init__(self, config):
		self._config = config
		self._scanners = {scanner : Orchestrator._supported_scanners[scanner](config) for scanner in Orchestrator._supported_scanners} # Initialize scanners
		self._reports = {scanner : {"report_file_prefix" : os.path.join(Orchestrator._reports_dir, "%s-%s" % (scanner, self._config["task_name"])), "report" : None} for scanner in Orchestrator._supported_scanners} # Setup temp report files
		self._bootstrap_scanners()

	def _bootstrap_scanners(self):
		for scanner in self._scanners:
			self._scanners[scanner].bootstrap()

	def kickstart(self):
		for scanner in self._scanners:
			Logger.spit("Launching %s" % scanner, caller_prefix = Orchestrator._caller_prefix)
			self._scanners[scanner].start()

		completed = set()
		while True: # Poll scanners' status every X seconds (_poll_interval)
			stop = True
			for scanner in self._scanners:
				if not self._scanners[scanner].status(): stop = False # If at least one scanner is still running, keep polling
				else:
					if scanner in completed: continue
					Logger.spit("%s done" % scanner, caller_prefix = Orchestrator._caller_prefix)
					self._reports[scanner]["report"] = self._scanners[scanner].get_results()
					dump(self._reports[scanner]["report"], "%s.pickle" % self._reports[scanner]["report_file_prefix"])
					jdump(self._reports[scanner]["report"], "%s.json" % self._reports[scanner]["report_file_prefix"]) # JSON format is temporary for debugging
					completed.add(scanner)
			
			if stop: break
			sleep(Orchestrator._poll_interval)

	def get_reports(self):
		return self._reports

	""" Check if everything is working properly
	"""
	@classmethod
	def check_setup(cls):
		dummy_config = {
			"task_name" : "Example Task",
			"hosts" : [{"host" : "127.0.0.1", "ports" : [7012], "web" : [], "scan" : "fast", "task_id" : uuid()}]
		}
		setup = True

		try:
			orch = Orchestrator(dummy_config)
			orch.kickstart()
		except Exception as e:
			Logger.spit(stringify_exception(e), warning = True, caller_prefix = Orchestrator._caller_prefix)
			setup = False

		return setup
