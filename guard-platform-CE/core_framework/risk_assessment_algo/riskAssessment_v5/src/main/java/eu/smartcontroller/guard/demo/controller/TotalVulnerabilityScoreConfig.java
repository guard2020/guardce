package eu.smartcontroller.guard.demo.controller;

import eu.smartcontroller.guard.demo.model.securityPolicies.TotalVulnerabilityScore;
import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.common.serialization.StringSerializer;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.kafka.core.DefaultKafkaProducerFactory;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.core.ProducerFactory;
import org.springframework.kafka.support.serializer.JsonSerializer;

import java.util.HashMap;
import java.util.Map;

import static eu.smartcontroller.guard.demo.SpringBootKafkaAppApplication.kafkaEndpoint;

@Configuration
public class TotalVulnerabilityScoreConfig {

    @Bean
    public ProducerFactory<String, TotalVulnerabilityScore> producerFactory2() {

        // read kafkaEndpoint(IP:port) from the corresponding env-variable
        kafkaEndpoint=System.getenv("kafkaEndpoint");
        if (kafkaEndpoint==null) {
            KafkaProducerController.logger.info("env variable kafkaEndpoint is null!");
            kafkaEndpoint="10.0.0.7:9092";
        }
        KafkaProducerController.logger.info("kafkaEndpoint is set to " + kafkaEndpoint);

        // HashMap to store the configurations
        Map<String, Object> config = new HashMap<>();
        System.out.println("kafkaEndpoint in TotalVulnerabilityScoreConfig: " + kafkaEndpoint);
        config.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, kafkaEndpoint);
        config.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class);
        config.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, JsonSerializer.class);

        return new DefaultKafkaProducerFactory<>(config);
    }

    @Bean
    public KafkaTemplate<String, TotalVulnerabilityScore> kafkaTemplate() {
        return new KafkaTemplate<>(producerFactory2());
    }
}
