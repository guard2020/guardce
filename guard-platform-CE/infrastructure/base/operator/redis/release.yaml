---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: redis-operator
rules:
- apiGroups:
  - k8s.amaiz.com
  resources:
  - '*'
  verbs:
  - '*'
- apiGroups:
  - ""
  resources:
  - pods
  - services
  - endpoints
  - persistentvolumeclaims
  - events
  - configmaps
  - secrets
  verbs:
  - '*'
- apiGroups:
  - apps
  resources:
  - statefulsets
  - replicasets
  verbs:
  - '*'
- apiGroups:
  - policy
  resources:
  - poddisruptionbudgets
  verbs:
  - '*'
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
- apiGroups:
  - apps
  resources:
  - replicasets
  - deployments
  verbs:
  - 'get'
- apiGroups:
  - monitoring.coreos.com
  resources:
  - servicemonitors
  verbs:
  - get
  - create
- apiGroups:
  - apps
  resourceNames:
  - redis-operator
  resources:
  - deployments/finalizers
  verbs:
  - update

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: redis-operator
subjects:
- kind: ServiceAccount
  name: redis-operator
  namespace: operator
roleRef:
  kind: ClusterRole
  name: redis-operator
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: redis-operator
  namespace: operator

---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: redis-operator
  name: redis-operator
  namespace: operator
spec:
  selector:
    matchLabels:
      app: redis-operator
  template:
    metadata:
      annotations:
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
        seccomp.security.alpha.kubernetes.io/pod: runtime/default
      labels:
        app: redis-operator
    spec:
      serviceAccountName: redis-operator
      containers:
      - name: redis-operator
        image: amaiz/redis-operator:v0.1.4
        args:
        - --zap-time-encoding
        - iso8601
        env:
        - name: WATCH_NAMESPACE # left empty to watch all namespaces
        - name: OPERATOR_NAME
          value: redis-operator
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - all
          readOnlyRootFilesystem: true
        volumeMounts:
        - mountPath: /tmp
          name: tmpfs
      securityContext:
        runAsUser: 7777777
        runAsGroup: 7777777
        fsGroup: 7777777
        runAsNonRoot: true
      volumes:
      - emptyDir: {}
        name: tmpfs
